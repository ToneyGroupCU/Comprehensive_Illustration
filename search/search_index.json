{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 This is a collection of code illustration of Toney Group . Free feel to contact me at zizh7255@colorado.edu . The design of this site is based on emptymalei/deep-learning from datumorphism . An example of what you can do here: \u00b6 A subsection \u00b6 LaTeX: $$ \\begin{equation} \\int _{\\text{x-ray}}^{\\text{Neutron}}\\text{Synchrotron}=??? \\end{equation} $$ Figure: Fig 1. This is a Synchrotron. Box: Neutron Neutron is Neutron X-ray X-ray is X-ray Synchrotron Synchrotron is Synchrotron Code Another Code import numpy as np import diffraction as diff import matplotlib.pyplot as plt import matplotlib.cm as cm import time as time from matplotlib.widgets import Button import scipy.io from matplotlib.widgets import RangeSlider import scipy.ndimage as ndimage Hello World !!! Contributors to Wikimedia projects. F-divergence. In: Wikipedia [Internet]. 17 Jul 2021 [cited 6 Sep 2021]. Available: https://en.wikipedia.org/wiki/F-divergence#Instances_of_f-divergences \u21a9 Nowozin S, Cseke B, Tomioka R. f-GAN: Training Generative Neural Samplers using Variational Divergence Minimization. arXiv [stat.ML]. 2016. Available: http://arxiv.org/abs/1606.00709 \u21a9 Contributors to Wikimedia projects. Convex conjugate. In: Wikipedia [Internet]. 20 Feb 2021 [cited 7 Sep 2021]. Available: https://en.wikipedia.org/wiki/Convex_conjugate \u21a9","title":"Home"},{"location":"#introduction","text":"This is a collection of code illustration of Toney Group . Free feel to contact me at zizh7255@colorado.edu . The design of this site is based on emptymalei/deep-learning from datumorphism .","title":"Introduction"},{"location":"#an-example-of-what-you-can-do-here","text":"","title":"An example of what you can do here:"},{"location":"#a-subsection","text":"LaTeX: $$ \\begin{equation} \\int _{\\text{x-ray}}^{\\text{Neutron}}\\text{Synchrotron}=??? \\end{equation} $$ Figure: Fig 1. This is a Synchrotron. Box: Neutron Neutron is Neutron X-ray X-ray is X-ray Synchrotron Synchrotron is Synchrotron Code Another Code import numpy as np import diffraction as diff import matplotlib.pyplot as plt import matplotlib.cm as cm import time as time from matplotlib.widgets import Button import scipy.io from matplotlib.widgets import RangeSlider import scipy.ndimage as ndimage Hello World !!! Contributors to Wikimedia projects. F-divergence. In: Wikipedia [Internet]. 17 Jul 2021 [cited 6 Sep 2021]. Available: https://en.wikipedia.org/wiki/F-divergence#Instances_of_f-divergences \u21a9 Nowozin S, Cseke B, Tomioka R. f-GAN: Training Generative Neural Samplers using Variational Divergence Minimization. arXiv [stat.ML]. 2016. Available: http://arxiv.org/abs/1606.00709 \u21a9 Contributors to Wikimedia projects. Convex conjugate. In: Wikipedia [Internet]. 20 Feb 2021 [cited 7 Sep 2021]. Available: https://en.wikipedia.org/wiki/Convex_conjugate \u21a9","title":"A subsection"},{"location":"tags/","text":"Tags \u00b6 Following is a list of relevant tags:","title":"Tags"},{"location":"tags/#tags","text":"Following is a list of relevant tags:","title":"Tags"},{"location":"GIWAXS/GIWAXS%20Simulation/","text":"GIWAXS Simulation tool in Python \u00b6 A program for 2D material diffraction simulation is introduced in this work. The sample is considered as crystallites with a Gaussian distribution in orientation in spherical coordinate (r, \\(\\theta\\) , \\(\\phi\\) ). The simulated diffraction pattern is in (q \\(_x\\) , q \\(_{xy}\\) ) plane which is designed to compare with WAXS(wide angle x-ray scattering) measurement. Thus Braggg peaks elongates in a ring pattern from their original positions in reciprocal space. Fig 1. (a) Crystal structure of 2D perovskite; (b) GIWAXS data of PPA; (c) GIWAXS simulation of PPA. Diffraction Intensity \u00b6 In reciprocal space, the Gaussian distribution in crystallites orientation results in a rotation for each Bragg peak. If we consider using an area detector to measure the diffraction intensity in q \\(_z\\) q \\(_{x}\\) plane. It is a summation of all Bragg peaks with each of them has the same Gaussian width( \\(\\sigma_\\theta\\) , \\(\\sigma_\\phi\\) ) centered in (q \\(_x\\) , q \\(_y\\) , q \\(_z\\) ): \\[ \\begin{equation} I(q_z,q_{x})=\\sum_{h,k,l}|\\sum_{i} f_i(\\mathbf{Q}) e^{i\\mathbf{Q}\\cdot\\mathbf{r}_n}|^2 e^{-\\frac{1}{2}\\frac{(\\theta^I-\\theta_0^B)^2}{\\sigma_\\theta^2}}e^{-\\frac{1}{2}\\frac{(\\phi^I-\\phi_0^B)^2}{\\sigma_\\phi^2}}e^{-\\frac{1}{2}\\frac{(q^I-q_0^B)^2}{\\sigma_q^2}} \\end{equation} \\] where ( \\(q^I\\) , \\(\\theta^I\\) , \\(\\phi^I\\) ) is the position of image plane(q \\(_x\\) , q \\(_z\\) ) in spherical coordinate. Fig 2. Spherical Coordinate \\[ \\begin{equation} q=\\sqrt{q_z^2+q_{x}^2},\\quad \\theta=\\frac{\\pi}{2}-\\arctan\\frac{q_z}{|q_{x}|}, \\quad \\phi= \\left\\{ \\begin{array}{cc} 0, \\quad x>0\\\\ \\pi,\\quad x<0 \\end{array} \\right. \\end{equation} \\] \\(\\mathbf{Q}\\) is the position of Bragg peaks and (hkl) is Miller index. \\(n\\) indicate the atoms in the unit cell and r \\(_n\\) is the real space position of \\(n\\) th atom in the unit cell. \\[ \\begin{equation} \\mathbf{Q}=h\\mathbf{b}_1+k\\mathbf{b}_2+l\\mathbf{b}_3 \\end{equation} \\] ( \\(q_0^B\\) , \\(\\theta_0^B\\) , \\(\\phi_0^B\\) ) is the position of Bragg peaks in reciprocal space converted to spherical coordinates: \\[ \\begin{equation} q_0^B=|\\mathbf{Q}|,\\quad\\theta_0^B=\\arctan\\frac{Q_z}{\\sqrt{Q_x^2+Q_y^2}},\\quad\\phi_0^B=\\arccos\\frac{Q_y}{\\sqrt{Q_x^2+Q_y^2}} \\end{equation} \\] It should be noticed that this is a theoretical result in (q \\(_z\\) ,q \\(_x\\) ) plane. Diffraction Ewald sphere is not considered here. Thus there is no 'missing wadge' as it always appears in GIWAXS. And a Gaussion profile in \\(\\hat{q}\\) direction is added to make a finite peak width in 2D image plane. In real materials the line shape in \\(\\hat{q}\\) is Lorentizian which depends on strain and crystallite size. Bragg Peaks \u00b6 Although we aim at 2D material in this proposal, a 3D crystal structure is needed to calculate the Bragg peaks. If the position of atoms is described in 2D, we need to assume a lattice constant or d-spacing in z-direction. The single crystal Bragg peaks are calculated from crystal structure file(.cif, POSCAR et. al) where lattice parameters and the positions of atoms in real space are provided. POSCAR File Sn2 O4 1.0 4.7648180450000002 0.0000000000000000 0.0000000000000003 0.0000000000000008 4.7648180450000002 0.0000000000000003 0.0000000000000000 0.0000000000000000 3.2074997700000001 Sn O 2 4 direct 0.5000000000000000 0.5000000000000000 0.5000000000000000 Sn4 + 0.0000000000000000 0.0000000000000000 0.0000000000000000 Sn4 + 0.8059722950000000 0.1940277050000000 0.5000000000000000 O2 - 0.1940277050000000 0.8059722950000000 0.5000000000000000 O2 - 0.3059722950000000 0.3059722950000001 0.0000000000000000 O2 - 0.6940277050000000 0.6940277050000000 0.0000000000000000 O2 - The unit vector in real and reciprocal space are defined as: \\[ \\begin{equation} \\begin{aligned} \\mathbf{a}_1&=(a,0,0),\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\,\\,\\,\\,\\quad\\quad\\quad\\quad \\mathbf{b}_1=\\frac{2\\pi}{V}\\mathbf{a}_2\\times\\mathbf{a}_3\\\\ \\mathbf{a}_2&=(b\\cos\\gamma,b\\sin\\gamma,0),\\quad\\quad\\quad\\quad\\quad\\quad\\,\\,\\,\\quad\\quad\\quad\\quad\\mathbf{b}_2=\\frac{2\\pi}{V}\\mathbf{a}_3\\times\\mathbf{a}_1\\\\ \\mathbf{a}_3&=(c\\cos\\beta,cn_2,c\\sqrt{\\sin^2\\beta+n_2^2}),\\quad\\quad\\quad\\quad\\quad\\quad\\mathbf{b}_3=\\frac{2\\pi}{V}\\mathbf{a}_1\\times\\mathbf{a}_2 \\end{aligned} \\end{equation} \\] where \\((a,b,c)\\) and \\((\\alpha,\\beta,\\gamma)\\) are lattice constants and angles of unit cell, \\[ \\begin{equation} n_2=\\frac{\\cos\\alpha-\\cos\\beta\\cos\\gamma}{\\sin\\gamma} \\end{equation} \\] \\[ \\begin{equation} V= \\mathbf{a}_1\\cdot(\\mathbf{a}_2\\times\\mathbf{a}_3) \\end{equation} \\] We also made a rotation matrix to help adjust the sample orientation if the it is not ideally given by in the crystal structure file: \\[ \\begin{equation} M=\\left(\\begin{array}{ccc} \\mathbf{a}_1\\\\ \\mathbf{a}_2 \\\\ \\mathbf{a}_3 \\end{array}\\right)=\\left(\\begin{array}{ccc} a & 0 & 0\\\\ b\\cos\\gamma & b\\sin\\gamma & 0 \\\\ c\\cos\\beta & c n_2 & c\\sqrt{\\sin^2\\beta+n_2^2} \\end{array}\\right) \\end{equation} \\] \\[ \\begin{equation} \\hat{q},\\,|\\mathbf{q}|,\\,\\Delta E \\end{equation} \\] \\[ \\begin{equation} E=\\sqrt{m^2c^4+p^2c^2} \\end{equation} \\] \\[ \\begin{equation} R_x(\\theta)=\\left(\\begin{array}{ccc} 1 & 0 & 0\\\\ 0 & \\cos\\theta & -\\sin\\theta \\\\ 0 & \\sin\\theta & \\cos\\theta \\end{array}\\right),\\quad R_y(\\theta)=\\left(\\begin{array}{ccc} \\cos\\theta & 0 & -\\sin\\theta\\\\ 0 & 1 & 0 \\\\ \\sin\\theta & 0 & \\cos\\theta \\end{array}\\right) \\end{equation} \\] Multiply Matrix M by \\(R_x(\\theta)\\) or \\(R_y(\\theta)\\) gives the rotated lattice vectors. Position of Bragg peaks with Miller index (hkl): \\[ \\begin{equation} \\mathbf{G}=h\\mathbf{b}_1+k\\mathbf{b}_2+l\\mathbf{b}_3 \\end{equation} \\] Fig 3. Workflow of this program. Download the source code. Code Set the parameters Read CIF Simulation Plot import numpy as np import diffraction as diff import matplotlib.pyplot as plt import matplotlib.cm as cm import time as time from matplotlib.widgets import Button import scipy.io from matplotlib.widgets import RangeSlider import scipy.ndimage as ndimage # use thetax and thetay to adjust initial orientation of the sample thetax = np . pi / 2 * 1 thetay = np . pi / 2 * 0 hkl_dimension = 10 # sigma_theta, if you need a small number for single crystal, input~0.01, # if you need infinity, input~1000 sigma1 = 0.02 # sigma_phi sigma2 = 1000 # sigma_r, use this to tune the peak linewidth sigma3 = 0.01 # settings for imagine plane resolutionx = 300 qxymax = 2.5 qzmax = 3 qzmin = 0 resolutionz = int ( resolutionx / qxymax * qzmax ) gridx , gridz = np . meshgrid ( np . linspace ( - qxymax , qxymax , resolutionx ), np . linspace ( qzmin , qzmax , resolutionz )) # read crystal structure from POSCAR # POSCAR file which can be easily converted from cif on VESTA (fractional coordinate) dirr = '' filename = 'MA2DMF2Pb3I8_Petrov2017' address = dirr + filename + '.vasp' a1 , a2 , a3 , positions = diff . read_poscar ( address ) # example (graphite) Bpeaks , Mqxy , Mqz , I_miller = diff . Braggg_peaks ( a1 , a2 , a3 , positions , thetax , thetay , hkl_dimension ) t1_start = time . process_time () # calculated GIWAXS pattern III = diff . intensity ( gridx , gridz , Bpeaks , sigma1 , sigma2 , sigma3 , hkl_dimension ) t1_stop = time . process_time () print ( 'cpu time =' ) print ( t1_stop - t1_start , 's' ) # make the plot colorbar = 0.5 # upper limit # II1=np.log(III+1) II1 = III fig , ax = plt . subplots ( figsize = ( 14 , 14 )) plt . imshow ( II1 , interpolation = 'nearest' , cmap = cm . jet , origin = 'lower' , extent = [ - qxymax , qxymax , qzmin , qzmax ], vmax = colorbar * II1 . max (), vmin = II1 . min ()) ax . set_xlabel ( 'q$_ {xy} $(1/A)' , fontsize = 16 ) ax . set_ylabel ( 'q$_ {z} $(1/A)' , fontsize = 16 ) ax . set_title ( filename + ' GIWAXS simulation' , fontsize = 16 ) fig . set_size_inches ([ 17 , 10 ])","title":"GIWAXS Simulation"},{"location":"GIWAXS/GIWAXS%20Simulation/#giwaxs-simulation-tool-in-python","text":"A program for 2D material diffraction simulation is introduced in this work. The sample is considered as crystallites with a Gaussian distribution in orientation in spherical coordinate (r, \\(\\theta\\) , \\(\\phi\\) ). The simulated diffraction pattern is in (q \\(_x\\) , q \\(_{xy}\\) ) plane which is designed to compare with WAXS(wide angle x-ray scattering) measurement. Thus Braggg peaks elongates in a ring pattern from their original positions in reciprocal space. Fig 1. (a) Crystal structure of 2D perovskite; (b) GIWAXS data of PPA; (c) GIWAXS simulation of PPA.","title":"GIWAXS Simulation tool in Python"},{"location":"GIWAXS/GIWAXS%20Simulation/#diffraction-intensity","text":"In reciprocal space, the Gaussian distribution in crystallites orientation results in a rotation for each Bragg peak. If we consider using an area detector to measure the diffraction intensity in q \\(_z\\) q \\(_{x}\\) plane. It is a summation of all Bragg peaks with each of them has the same Gaussian width( \\(\\sigma_\\theta\\) , \\(\\sigma_\\phi\\) ) centered in (q \\(_x\\) , q \\(_y\\) , q \\(_z\\) ): \\[ \\begin{equation} I(q_z,q_{x})=\\sum_{h,k,l}|\\sum_{i} f_i(\\mathbf{Q}) e^{i\\mathbf{Q}\\cdot\\mathbf{r}_n}|^2 e^{-\\frac{1}{2}\\frac{(\\theta^I-\\theta_0^B)^2}{\\sigma_\\theta^2}}e^{-\\frac{1}{2}\\frac{(\\phi^I-\\phi_0^B)^2}{\\sigma_\\phi^2}}e^{-\\frac{1}{2}\\frac{(q^I-q_0^B)^2}{\\sigma_q^2}} \\end{equation} \\] where ( \\(q^I\\) , \\(\\theta^I\\) , \\(\\phi^I\\) ) is the position of image plane(q \\(_x\\) , q \\(_z\\) ) in spherical coordinate. Fig 2. Spherical Coordinate \\[ \\begin{equation} q=\\sqrt{q_z^2+q_{x}^2},\\quad \\theta=\\frac{\\pi}{2}-\\arctan\\frac{q_z}{|q_{x}|}, \\quad \\phi= \\left\\{ \\begin{array}{cc} 0, \\quad x>0\\\\ \\pi,\\quad x<0 \\end{array} \\right. \\end{equation} \\] \\(\\mathbf{Q}\\) is the position of Bragg peaks and (hkl) is Miller index. \\(n\\) indicate the atoms in the unit cell and r \\(_n\\) is the real space position of \\(n\\) th atom in the unit cell. \\[ \\begin{equation} \\mathbf{Q}=h\\mathbf{b}_1+k\\mathbf{b}_2+l\\mathbf{b}_3 \\end{equation} \\] ( \\(q_0^B\\) , \\(\\theta_0^B\\) , \\(\\phi_0^B\\) ) is the position of Bragg peaks in reciprocal space converted to spherical coordinates: \\[ \\begin{equation} q_0^B=|\\mathbf{Q}|,\\quad\\theta_0^B=\\arctan\\frac{Q_z}{\\sqrt{Q_x^2+Q_y^2}},\\quad\\phi_0^B=\\arccos\\frac{Q_y}{\\sqrt{Q_x^2+Q_y^2}} \\end{equation} \\] It should be noticed that this is a theoretical result in (q \\(_z\\) ,q \\(_x\\) ) plane. Diffraction Ewald sphere is not considered here. Thus there is no 'missing wadge' as it always appears in GIWAXS. And a Gaussion profile in \\(\\hat{q}\\) direction is added to make a finite peak width in 2D image plane. In real materials the line shape in \\(\\hat{q}\\) is Lorentizian which depends on strain and crystallite size.","title":"Diffraction Intensity"},{"location":"GIWAXS/GIWAXS%20Simulation/#bragg-peaks","text":"Although we aim at 2D material in this proposal, a 3D crystal structure is needed to calculate the Bragg peaks. If the position of atoms is described in 2D, we need to assume a lattice constant or d-spacing in z-direction. The single crystal Bragg peaks are calculated from crystal structure file(.cif, POSCAR et. al) where lattice parameters and the positions of atoms in real space are provided. POSCAR File Sn2 O4 1.0 4.7648180450000002 0.0000000000000000 0.0000000000000003 0.0000000000000008 4.7648180450000002 0.0000000000000003 0.0000000000000000 0.0000000000000000 3.2074997700000001 Sn O 2 4 direct 0.5000000000000000 0.5000000000000000 0.5000000000000000 Sn4 + 0.0000000000000000 0.0000000000000000 0.0000000000000000 Sn4 + 0.8059722950000000 0.1940277050000000 0.5000000000000000 O2 - 0.1940277050000000 0.8059722950000000 0.5000000000000000 O2 - 0.3059722950000000 0.3059722950000001 0.0000000000000000 O2 - 0.6940277050000000 0.6940277050000000 0.0000000000000000 O2 - The unit vector in real and reciprocal space are defined as: \\[ \\begin{equation} \\begin{aligned} \\mathbf{a}_1&=(a,0,0),\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\quad\\,\\,\\,\\,\\quad\\quad\\quad\\quad \\mathbf{b}_1=\\frac{2\\pi}{V}\\mathbf{a}_2\\times\\mathbf{a}_3\\\\ \\mathbf{a}_2&=(b\\cos\\gamma,b\\sin\\gamma,0),\\quad\\quad\\quad\\quad\\quad\\quad\\,\\,\\,\\quad\\quad\\quad\\quad\\mathbf{b}_2=\\frac{2\\pi}{V}\\mathbf{a}_3\\times\\mathbf{a}_1\\\\ \\mathbf{a}_3&=(c\\cos\\beta,cn_2,c\\sqrt{\\sin^2\\beta+n_2^2}),\\quad\\quad\\quad\\quad\\quad\\quad\\mathbf{b}_3=\\frac{2\\pi}{V}\\mathbf{a}_1\\times\\mathbf{a}_2 \\end{aligned} \\end{equation} \\] where \\((a,b,c)\\) and \\((\\alpha,\\beta,\\gamma)\\) are lattice constants and angles of unit cell, \\[ \\begin{equation} n_2=\\frac{\\cos\\alpha-\\cos\\beta\\cos\\gamma}{\\sin\\gamma} \\end{equation} \\] \\[ \\begin{equation} V= \\mathbf{a}_1\\cdot(\\mathbf{a}_2\\times\\mathbf{a}_3) \\end{equation} \\] We also made a rotation matrix to help adjust the sample orientation if the it is not ideally given by in the crystal structure file: \\[ \\begin{equation} M=\\left(\\begin{array}{ccc} \\mathbf{a}_1\\\\ \\mathbf{a}_2 \\\\ \\mathbf{a}_3 \\end{array}\\right)=\\left(\\begin{array}{ccc} a & 0 & 0\\\\ b\\cos\\gamma & b\\sin\\gamma & 0 \\\\ c\\cos\\beta & c n_2 & c\\sqrt{\\sin^2\\beta+n_2^2} \\end{array}\\right) \\end{equation} \\] \\[ \\begin{equation} \\hat{q},\\,|\\mathbf{q}|,\\,\\Delta E \\end{equation} \\] \\[ \\begin{equation} E=\\sqrt{m^2c^4+p^2c^2} \\end{equation} \\] \\[ \\begin{equation} R_x(\\theta)=\\left(\\begin{array}{ccc} 1 & 0 & 0\\\\ 0 & \\cos\\theta & -\\sin\\theta \\\\ 0 & \\sin\\theta & \\cos\\theta \\end{array}\\right),\\quad R_y(\\theta)=\\left(\\begin{array}{ccc} \\cos\\theta & 0 & -\\sin\\theta\\\\ 0 & 1 & 0 \\\\ \\sin\\theta & 0 & \\cos\\theta \\end{array}\\right) \\end{equation} \\] Multiply Matrix M by \\(R_x(\\theta)\\) or \\(R_y(\\theta)\\) gives the rotated lattice vectors. Position of Bragg peaks with Miller index (hkl): \\[ \\begin{equation} \\mathbf{G}=h\\mathbf{b}_1+k\\mathbf{b}_2+l\\mathbf{b}_3 \\end{equation} \\] Fig 3. Workflow of this program. Download the source code. Code Set the parameters Read CIF Simulation Plot import numpy as np import diffraction as diff import matplotlib.pyplot as plt import matplotlib.cm as cm import time as time from matplotlib.widgets import Button import scipy.io from matplotlib.widgets import RangeSlider import scipy.ndimage as ndimage # use thetax and thetay to adjust initial orientation of the sample thetax = np . pi / 2 * 1 thetay = np . pi / 2 * 0 hkl_dimension = 10 # sigma_theta, if you need a small number for single crystal, input~0.01, # if you need infinity, input~1000 sigma1 = 0.02 # sigma_phi sigma2 = 1000 # sigma_r, use this to tune the peak linewidth sigma3 = 0.01 # settings for imagine plane resolutionx = 300 qxymax = 2.5 qzmax = 3 qzmin = 0 resolutionz = int ( resolutionx / qxymax * qzmax ) gridx , gridz = np . meshgrid ( np . linspace ( - qxymax , qxymax , resolutionx ), np . linspace ( qzmin , qzmax , resolutionz )) # read crystal structure from POSCAR # POSCAR file which can be easily converted from cif on VESTA (fractional coordinate) dirr = '' filename = 'MA2DMF2Pb3I8_Petrov2017' address = dirr + filename + '.vasp' a1 , a2 , a3 , positions = diff . read_poscar ( address ) # example (graphite) Bpeaks , Mqxy , Mqz , I_miller = diff . Braggg_peaks ( a1 , a2 , a3 , positions , thetax , thetay , hkl_dimension ) t1_start = time . process_time () # calculated GIWAXS pattern III = diff . intensity ( gridx , gridz , Bpeaks , sigma1 , sigma2 , sigma3 , hkl_dimension ) t1_stop = time . process_time () print ( 'cpu time =' ) print ( t1_stop - t1_start , 's' ) # make the plot colorbar = 0.5 # upper limit # II1=np.log(III+1) II1 = III fig , ax = plt . subplots ( figsize = ( 14 , 14 )) plt . imshow ( II1 , interpolation = 'nearest' , cmap = cm . jet , origin = 'lower' , extent = [ - qxymax , qxymax , qzmin , qzmax ], vmax = colorbar * II1 . max (), vmin = II1 . min ()) ax . set_xlabel ( 'q$_ {xy} $(1/A)' , fontsize = 16 ) ax . set_ylabel ( 'q$_ {z} $(1/A)' , fontsize = 16 ) ax . set_title ( filename + ' GIWAXS simulation' , fontsize = 16 ) fig . set_size_inches ([ 17 , 10 ])","title":"Bragg Peaks"},{"location":"GIWAXS/GIWAXS/","text":"GIWAXS experiment \u00b6","title":"GIWAXS experiment"},{"location":"GIWAXS/GIWAXS/#giwaxs-experiment","text":"","title":"GIWAXS experiment"},{"location":"GIWAXS/intro/","text":"Introduction to GIWAXS \u00b6","title":"Introduction"},{"location":"GIWAXS/intro/#introduction-to-giwaxs","text":"","title":"Introduction to GIWAXS"},{"location":"RSoXS/Contrast_function/","text":"The contrast of RSoXS is strongly dependent on the dispersion ( \\(\\delta\\) ) and the absorption ( \\(\\beta\\) ) components of the refractive index (n) as represented in the equations below. The refractive index [ \\(n(E)\\) ] at a photon energy \\(E\\) can be calculated using equation: \\[\\begin{equation} \\begin{aligned} n(E)=&1-\\delta(E)+i\\beta(E)\\\\ =&1-\\frac{r_0}{2\\pi}\\lambda^2\\sum_j N_j[f_{1j}(E)+if_{2j}(E)] \\end{aligned} \\label{eq:contrast1} \\end{equation}\\] The contrast function ( \\(C\\) ) can be estimated from equation: \\begin{equation} C\\propto{(\\Delta n)^2}\\propto{(\\Delta\\delta)^2+(\\Delta\\beta)^2} \\label{eq:contrast2} \\end{equation} Where \\(r_0\\) is the classical electron radius, \\(\\lambda\\) is the wavelength of incident X-rays, \\(N_M\\) the number density of an atom ( \\(M\\) ), \\(f_1\\) and \\(f_2\\) are the real and imaginary parts of the complex atomic scattering factor, and the summation is performed for all atoms ( \\(M\\) ). Kramers\u2013Kronig relations: \\begin{equation} \\chi_1(\\omega)=\\frac{1}{\\pi} \\mathcal{P} \\int_{-\\infty}^{\\infty} \\frac{\\omega^{\\prime} \\chi_2\\left(\\omega^{\\prime}\\right)}{\\omega^{\\prime 2}-\\omega^2} d \\omega^{\\prime}+\\frac{\\omega}{\\pi} \\mathcal{P} \\int_{-\\infty}^{\\infty} \\frac{\\chi_2\\left(\\omega^{\\prime}\\right)}{\\omega^{\\prime 2}-\\omega^2} d \\omega^{\\prime} \\end{equation} \\[\\begin{equation} \\chi_2(\\omega)=-\\frac{2}{\\pi} \\mathcal{P} \\int_0^{\\infty} \\frac{\\omega \\chi_1\\left(\\omega^{\\prime}\\right)}{\\omega^{\\prime 2}-\\omega^2} d \\omega^{\\prime}=-\\frac{2 \\omega}{\\pi} \\mathcal{P} \\int_0^{\\infty} \\frac{\\chi_1\\left(\\omega^{\\prime}\\right)}{\\omega^{\\prime 2}-\\omega^2} d \\omega^{\\prime} \\end{equation}\\]","title":"Contrast function"},{"location":"Rigaku/intro/","text":"ConvertRASX \u00b6 Extracts image from Rigaku .rasx format and converts it to .tiff and .jpg Julian Mars ( julian.mars@outlook.com ) Import Defs Path import numpy as np import matplotlib.pyplot as plt from zipfile import ZipFile from PIL import Image from pathlib import Path from glob import glob import io as io def open_rasx ( fname ): \"\"\" Opens rigaku .rasx image files. File structure is as following: .rasx -> zip -root.xml -DataN -ImageX.bin -MesurementConditions0.xml \"\"\" with ZipFile ( fname ) as myzip : with myzip . open ( 'Data0/Image0.bin' ) as myfile : im = np . frombuffer ( myfile . read (), dtype = 'uint32' , ) . reshape ( 385 , 775 ) with myzip . open ( 'Data0/MesurementConditions0.xml' ) as myfile : header = myfile . read () . decode () return im , header def save_tif ( fname , im ): im = Image . fromarray ( im ) im . save ( fname ) folder = Path ( '/Users/zihanzhang/Library/CloudStorage/OneDrive-UCB-O365' ) Convert all Rasx files in the folder: Code for f in glob ( str ( folder ) + '/*.rasx' ): print ( f ) f = Path ( f ) im , header = open_rasx ( f ) #inverse 1st axis im = im [:: - 1 ,:] im = np . log ( im ) plt . imshow ( im ) plt . savefig ( f . with_suffix ( '.jpg' ), dpi = 360 ) plt . show () save_tif ( f . with_suffix ( '.tiff' ), im ) Converted image","title":"Rasx to image file"},{"location":"Rigaku/intro/#convertrasx","text":"Extracts image from Rigaku .rasx format and converts it to .tiff and .jpg Julian Mars ( julian.mars@outlook.com ) Import Defs Path import numpy as np import matplotlib.pyplot as plt from zipfile import ZipFile from PIL import Image from pathlib import Path from glob import glob import io as io def open_rasx ( fname ): \"\"\" Opens rigaku .rasx image files. File structure is as following: .rasx -> zip -root.xml -DataN -ImageX.bin -MesurementConditions0.xml \"\"\" with ZipFile ( fname ) as myzip : with myzip . open ( 'Data0/Image0.bin' ) as myfile : im = np . frombuffer ( myfile . read (), dtype = 'uint32' , ) . reshape ( 385 , 775 ) with myzip . open ( 'Data0/MesurementConditions0.xml' ) as myfile : header = myfile . read () . decode () return im , header def save_tif ( fname , im ): im = Image . fromarray ( im ) im . save ( fname ) folder = Path ( '/Users/zihanzhang/Library/CloudStorage/OneDrive-UCB-O365' ) Convert all Rasx files in the folder: Code for f in glob ( str ( folder ) + '/*.rasx' ): print ( f ) f = Path ( f ) im , header = open_rasx ( f ) #inverse 1st axis im = im [:: - 1 ,:] im = np . log ( im ) plt . imshow ( im ) plt . savefig ( f . with_suffix ( '.jpg' ), dpi = 360 ) plt . show () save_tif ( f . with_suffix ( '.tiff' ), im ) Converted image","title":"ConvertRASX"},{"location":"tags/","text":"Tags \u00b6 Following is a list of relevant tags:","title":"Tags"},{"location":"tags/#tags","text":"Following is a list of relevant tags:","title":"Tags"}]}